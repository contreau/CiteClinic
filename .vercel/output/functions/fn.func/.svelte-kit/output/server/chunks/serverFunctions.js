const pubmedPARAMS = {
  title: 'meta[name="citation_title"]',
  publishDate: 'meta[name="citation_date"]',
  rawAuthors: 'meta[name="citation_authors"]',
  volume: "span.cit",
  issue: "null",
  startPage: "null",
  endPage: "null",
  doi: 'meta[name="citation_doi"]',
  journal: 'meta[name="citation_journal_title"]',
  journalAbbrev: 'meta[name="citation_publisher"]',
  host: "pubmed.ncbi.nlm.nih.gov",
  route: "scholar-fetch"
};
const naturePARAMS = {
  title: 'meta[name="dc.title"]',
  publishDate: 'meta[name="dc.date"]',
  rawAuthors: 'meta[name="dc.creator"]',
  volume: 'meta[name="citation_volume"]',
  issue: 'meta[name="citation_issue"]',
  startPage: 'meta[name="citation_firstpage"]',
  endPage: 'meta[name="citation_lastpage"]',
  doi: 'meta[name="citation_doi"]',
  journal: 'meta[name="citation_journal_title"]',
  journalAbbrev: 'meta[name="citation_journal_abbrev"]',
  host: "www.nature.com",
  route: "scholar-fetch"
};
const nejmPARAMS = {
  title: 'meta[name="dc.Title"]',
  publishDate: 'meta[name="dc.Date"]',
  rawAuthors: 'meta[name="dc.Creator"]',
  volume: "p.f-ui",
  issue: "null",
  startPage: "null",
  endPage: "null",
  doi: 'meta[scheme="doi"]',
  journal: 'meta[name="citation_journal_title"]',
  journalAbbrev: "null",
  host: "www.nejm.org",
  route: "nejm-fetch"
};
const lancetPARAMS = {
  title: 'meta[name="citation_title"]',
  publishDate: 'meta[name="citation_date"]',
  rawAuthors: 'meta[name="citation_author"]',
  volume: 'meta[name="citation_volume"]',
  issue: 'meta[name="citation_issue"]',
  startPage: 'meta[name="citation_firstpage"]',
  endPage: 'meta[name="citation_lastpage"]',
  doi: 'meta[name="citation_doi"]',
  journal: 'meta[name="citation_journal_title"]',
  journalAbbrev: 'meta[name="citation_journal_abbrev"]',
  host: "www.thelancet.com",
  route: "lancet-fetch"
};
const jamaPARAMS = {
  title: 'meta[name="citation_title"]',
  publishDate: 'meta[name="citation_publication_date"]',
  rawAuthors: 'meta[name="citation_author"]',
  volume: 'meta[name="citation_volume"]',
  issue: 'meta[name="citation_issue"]',
  startPage: 'meta[name="citation_firstpage"]',
  endPage: 'meta[name="citation_lastpage"]',
  doi: 'meta[name="citation_doi"]',
  journal: 'meta[name="citation_journal_title"]',
  journalAbbrev: 'meta[name="citation_journal_abbrev"]',
  host: "jamanetwork.com",
  route: "scholar-fetch"
};
const bmjPARAMS = {
  title: 'meta[name="DC.Title"]',
  publishDate: 'meta[name="DC.Date"]',
  rawAuthors: 'meta[name="citation_author"]',
  volume: 'meta[name="citation_volume"]',
  issue: 'meta[name="citation_issue"]',
  startPage: 'meta[name="citation_firstpage"]',
  endPage: 'meta[name="citation_lastpage"]',
  doi: 'meta[name="DC.Identifier"]',
  journal: 'meta[name="citation_journal_title"]',
  journalAbbrev: 'meta[name="citation_journal_abbrev"]',
  host: "www.bmj.com",
  route: "bmj-fetch"
};
function retrieve(dom, params) {
  return dom.querySelector(params)?.getAttribute("content") ?? "null";
}
function getVolumeAndPageRange(dom, params) {
  const volume = retrieve(dom, params.volume);
  const issue = retrieve(dom, params.issue);
  const startPage = retrieve(dom, params.startPage);
  const endPage = retrieve(dom, params.endPage);
  let pageRange = "null";
  if (endPage === "null" && startPage !== "null") {
    pageRange = startPage;
  } else if (startPage !== "null" && endPage !== "null") {
    pageRange = `${startPage}-${endPage}`;
  }
  let volumeAndPageRange = "null";
  if (volume !== "null" && issue !== "null" && pageRange !== "null") {
    volumeAndPageRange = `${volume}(${issue}):${pageRange}`;
  } else
    volumeAndPageRange = "null";
  return volumeAndPageRange;
}
const affixes = [
  "ab",
  "af",
  "av",
  "ap",
  "abu",
  "aït",
  "al",
  "ālam",
  "at",
  "ath",
  "aust",
  "austre",
  "bar",
  "bath",
  "bat",
  "ben",
  "bin",
  "ibn",
  "bet",
  "bint",
  "binti",
  "binte",
  "da",
  "das",
  "de",
  "degli",
  "del",
  "dele",
  "du",
  "della",
  "der",
  "di",
  "dos",
  "el",
  "ferch",
  "verch",
  "fitz",
  "ka",
  "kil",
  "gil",
  "mal",
  "mul",
  "la",
  "le",
  "lille",
  "lu",
  "mala",
  "mellom",
  "myljom",
  "na",
  "ned",
  "nedre",
  "neder",
  "ngā",
  "nic",
  "ní",
  "nin",
  "nord",
  "norr",
  "nordre",
  "ny",
  "opp",
  "upp",
  "öfver",
  "ost",
  "öst",
  "öster",
  "øst",
  "østre",
  "över",
  "øvste",
  "øvre",
  "øver",
  "öz",
  "pour",
  "setia/setya",
  "stor",
  "söder",
  "sør",
  "sønder",
  "syd",
  "søndre",
  "syndre",
  "søre",
  "te",
  "ter",
  "tre",
  "van",
  "van de",
  "van den",
  "van der",
  "van het",
  "van 't",
  "väst",
  "väster",
  "erch",
  "vest",
  "vestre",
  "vesle",
  "vetle",
  "von",
  "war",
  "zu",
  "von und zuAb",
  "Af",
  "Av",
  "Ap",
  "Abu",
  "Aït",
  "Al",
  "Ālam",
  "At",
  "Ath",
  "Aust",
  "Austre",
  "Bar",
  "Bath",
  "Ben",
  "Bin",
  "Bet",
  "Bint",
  "Binti",
  "Binte",
  "Da",
  "Das",
  "De",
  "Degli",
  "Del",
  "Dele",
  "Du",
  "Della",
  "Der",
  "Di",
  "Dos",
  "El",
  "Ferch",
  "Verch",
  "Fitz",
  "Kil",
  "Gil",
  "Mal",
  "Mul",
  "La",
  "Le",
  "Lille",
  "Lu",
  "Mala",
  "Mellom",
  "Myljom",
  "Na",
  "Ned",
  "Nedre",
  "Neder",
  "Ngā",
  "Nic",
  "Ní",
  "Nin",
  "Nord",
  "Norr",
  "Nordre",
  "Ny",
  "Opp",
  "Upp",
  "Öfver",
  "Ost",
  "Öst",
  "Öster",
  "Øst",
  "Østre",
  "Över",
  "Øvste",
  "Øvre",
  "Øver",
  "Öz",
  "Pour",
  "Setia/Setya",
  "Stor",
  "Söder",
  "Sør",
  "Sønder",
  "Syd",
  "Søndre",
  "Syndre",
  "Søre",
  "Te",
  "Ter",
  "Tre",
  "Van",
  "Van De",
  "Van Den",
  "Van Der",
  "Van Het",
  "Van 't",
  "Väst",
  "Väster",
  "Erch",
  "Vest",
  "Vestre",
  "Vesle",
  "Vetle",
  "von und zu"
];
export {
  affixes as a,
  bmjPARAMS as b,
  nejmPARAMS as c,
  getVolumeAndPageRange as g,
  jamaPARAMS as j,
  lancetPARAMS as l,
  naturePARAMS as n,
  pubmedPARAMS as p,
  retrieve as r
};
